'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint max-len: 0 */
var fs = require('fs');
var Ajv = require('ajv');
var path = require('path');
var mocknode = require('./mocknode');

/**
 * @module axway-flow-sdk
 */

/**
 * @class
 */

var NodeBuilder = function () {
	/**
  * @private
  */
	function NodeBuilder(srcModule) {
		_classCallCheck(this, NodeBuilder);

		if (!srcModule) {
			throw new Error('expected a node module');
		}
		this._package(srcModule);
		this.clear();
	}

	_createClass(NodeBuilder, [{
		key: '_package',
		value: function _package(srcModule) {
			// find the package.json
			var pkgpath = srcModule.paths.reduce(function (acc, cur) {
				if (!acc) {
					var fname = path.join(path.dirname(cur), 'package.json');
					if (fs.existsSync(fname)) {
						return fname;
					}
				}
				return acc;
			}, null);
			if (!pkgpath) {
				throw new Error('expected a node module and package.json');
			}
			var pkg = JSON.parse(fs.readFileSync(pkgpath));
			this.name = pkg.name;
			this.description = pkg.description;
			this.modulePath = path.dirname(pkgpath);
		}

		/**
   * Clears all specs.
   * @private
   */

	}, {
		key: 'clear',
		value: function clear() {
			this.specs = {};
			this._name = null;
			this._method = null;
			return this;
		}

		/**
   * Adds a new node spec and prepares the `NodeBuilder` to accept the following spec
   * operations:
   * - {@link module:axway-node-sdk~NodeBuilder#method .method(key, [options])}
   * - {@link module:axway-node-sdk~NodeBuilder#output .output(key, [options])}
   *
   * The `key` parameter is used to uniquely identify the spec and represents a distinct
   * instance of a node for the flow editor.  The `key` will be used as the name unless the
   * `name` option is provided.  The new node will appear under the "general" category
   * by default, or under the provided `category` option.
   *
   * The `icon` option can be bmp, jpeg, png, gif, tiff, or  svg file.  After,
   * {@link module:axway-node-sdk~NodeBuilder#method .method}
   * can be used to add method(s), and
   * {@link module:axway-node-sdk~NodeBuilder#output .output} can be used to
   * define an output.  When done,
   * {@link module:axway-node-sdk~NodeBuilder#action .action} can be used to
   * define an action function and finish the spec.
   *
   * @public
   * @param {string} key - A unique key identifier for the node.
   * @param {object=} options - Options for the node.
   * @param {string=} options.name - A friendly name for the node as it will appear in the UI.
   * @param {string=} options.icon - An icon file.
   * @param {string=} options.description - A description for the node.
   * @param {string} [options.category=general] - A category under which the node will appear
   * 		in the UI (defaults to "general").
   * @return {@link module:axway-node-sdk~NodeBuilder `NodeBuilder`} The current
   *		object (this).
   * @example
   * sdk.init(module).add('encodeURI', { icon: 'encode.svg' });
   */

	}, {
		key: 'add',
		value: function add(key) {
			var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			if (this.specs[key]) {
				throw new Error('node already exists: ' + key);
			}
			if (this._name && this._method) {
				if (!this.specs[this._name].methods[this._method].action) {
					throw new Error('method requires `action`: ' + this._method);
				}
			}
			if (!key) {
				throw new Error('missing required parameter: key');
			}

			if (!this.specs[key]) {
				this._name = key;
				this._method = null;

				this.specs[key] = {
					schemaVersion: '1',
					name: options.name || key,
					description: options.description || this.description || null,
					icon: 'icon-GG-question-sign',
					category: options.category || 'general',
					methods: {}
				};
				options.icon && this._icon(options.icon);

				if (!this.specs[key].description) {
					// remove unused
					delete this.specs[key].description;
				}
				if (!this.specs[key].name) {
					// remove unused
					delete this.specs[key].name;
				}
			}
			return this;
		}
	}, {
		key: '_icon',
		value: function _icon(file) {
			var match = file.match(/\.(?:bmp|jpeg|jpg|png|gif|tiff|svg)$/);
			if (!match) {
				throw new Error('file must be bmp, jpg, jpeg, png, gif, tiff, or svg: ' + file);
			}
			var ficon = path.join(this.modulePath, file);
			if (!fs.existsSync(ficon)) {
				throw new Error('file does not exist: ' + file);
			}
			var type = match[0].substr(1);
			if (type === 'svg') {
				type = 'svg+xml';
			} else if (type === 'jpg') {
				type = 'jpeg';
			}
			var data = fs.readFileSync(ficon).toString('base64');
			this.specs[this._name].icon = 'data:image/' + type + ';base64,' + data;
			return this;
		}

		/**
   * Adds a new method to the current node spec and prepares the `NodeBuilder`
   * to accept the following method operations:
   * - {@link module:axway-node-sdk~NodeBuilder#parameter .parameter(name, schema, [required])}
   * - {@link module:axway-node-sdk~NodeBuilder#action .action(handler)}
   *
   * {@link module:axway-node-sdk~NodeBuilder#add .add(key, [options])} must be
   * called prior to adding a method.
   *
   * The `key` uniquely identifies the method for the node and will be used as
   * the name unless the `name` option is provided.
   *
   * @public
   * @param {string} key - A unique key identifier for the method.
   * @param {object=} options - Options for the method.
   * @param {string=} options.name - A friendly name for the method as it will appear in the UI.
   * @param {string=} options.description - A description for the method.
   * @return {@link module:axway-node-sdk~NodeBuilder `NodeBuilder`} The current
   *		object (this).
   * @example
   * sdk.init(module).add('encodeURI', { icon: 'encode.svg' })
   *	.method('encode', { name: 'Encode URI' });
   */

	}, {
		key: 'method',
		value: function method(key) {
			var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			if (!this._name) {
				throw new Error('need to start a node handler using: `node`');
			}
			if (!key) {
				throw new Error('missing required parameter: key');
			}
			this.specs[this._name].methods[key] = {
				name: options.name,
				description: options.description,
				parameter: {
					type: 'object',
					properties: {},
					required: [],
					additionalProperties: false
				},
				outputs: {}
			};
			if (!this.specs[this._name].methods[key].description) {
				// remove unused
				delete this.specs[this._name].methods[key].description;
			}
			if (!this.specs[this._name].methods[key].name) {
				// remove unused
				delete this.specs[this._name].methods[key].name;
			}
			this._method = key;
			return this;
		}

		/**
   * Adds a new parameter to the current method.  Any number of parameters can be added to a method.
   *
   * {@link module:axway-node-sdk~NodeBuilder#method .method(key, [options])} must be
   * called prior to adding a parameter.
   *
   * The `name` uniquely identifies the the parameter, and the `schema` is a valid
   * {@link http://json-schema.org JSON Schema} definition (both
   * {@link http://json-schema.org/draft-04/schema draft-04} and
   * {@link http://json-schema.org/draft-06/schema draft-06} are supported).
   *
   * @public
   * @param {string} name - A unique name for the parameter as it will appear in the UI.
   * @param {object} schema - A schema used to validate the parameter.
   * @param {boolean} [required=true] - A flag to indicate the parameter is required or optional.
   * @return {@link module:axway-node-sdk~NodeBuilder `NodeBuilder`} The current
   *		object (this).
   * @example
   * sdk.init(module).add('encodeURI', { icon: 'encode.svg' })
   *	.method('encode', { name: 'Encode URI' })
   *	.parameter('uri', { type: 'string' });
   */

	}, {
		key: 'parameter',
		value: function parameter(name, schema) {
			var required = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

			if (!this._name) {
				throw new Error('need to start a node handler using: `node`');
			}
			if (!this._method) {
				throw new Error('need to start a method using: `method`');
			}
			if (!name) {
				throw new Error('missing required parameter: name');
			}
			if (!schema) {
				throw new Error('missing required parameter: schema');
			}
			var ajv = new Ajv({ unknownFormats: ['multiline'] });
			ajv.compile(schema);

			this.specs[this._name].methods[this._method].parameter.properties[name] = schema;
			if (required) {
				this.specs[this._name].methods[this._method].parameter.required.push(name);
			}
			return this;
		}

		/**
   * Adds a new output to the current method.  Any number of outputs can be added to a method,
   * but for usability-sake, you should limit this.  The `output` represents one of the possible
   * callback routes for your method.  For example, if your method tested prime numbers, then
   * one output might be `prime`, and the other `not-prime`.
   *
   * {@link module:axway-node-sdk~NodeBuilder#method .method(key, [options])}
   * must be called prior to adding an output.
   *
   * The `key` uniquely identifies the the output route.  The `schema` is a valid
   * {@link http://json-schema.org JSON Schema} definition (both
   * {@link http://json-schema.org/draft-04/schema draft-04} and
   * {@link http://json-schema.org/draft-06/schema draft-06} are supported).
   * If `schema` is not provided, then the output type is effectively _any_ type.
   *
   * The `context` is a valid {@link https://github.com/json-path/JsonPath JSON Path} and
   * is used as the default by the flow editor.  When the output is invoked, the configured
   * context is where the output value will be written.
   *
   * @public
   * @param {string} key - A unique key for the output.
   * @param {string=} options.name - A friendly name for the output as it will appear in
   *		the UI.
   * @param {string=} options.description - The output description.
   * @param {string=} options.context - The default context string.
   * @param {object=} options.schema - The expected JSON schema for the output value.
   * @return {@link module:axway-node-sdk~NodeBuilder `NodeBuilder`} The current
   *		object (this).
   * @example
   * sdk.init(module).add('encodeURI', { icon: 'encode.svg' })
   *	.method('encode', { name: 'Encode URI' })
   *	.parameter('uri', { type: 'string' })
   *	.output('encoded', { context: '$.encodedURI', schema: { type: 'string' } });
   */

	}, {
		key: 'output',
		value: function output(key) {
			var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			if (!this._name) {
				throw new Error('need to start a node handler using: `node`');
			}
			var output = this.specs[this._name].methods[this._method].outputs[key] = {};
			['name', 'description', 'context', 'schema'].forEach(function (a) {
				return options[a] && (output[a] = options[a]);
			});
			return this;
		}

		/**
   * Assigns an action {@link module:axway-node-sdk~handler `handler`} to
   * the current method.  The method can only have one action handler.  Assigning an action will
   * terminate the current method definition.
   *
   * @public
   * @param {handler} - The action {@link module:axway-node-sdk~handler `handler`}
   * 		function.
   * @return {@link module:axway-node-sdk~NodeBuilder `NodeBuilder`} The current
   *		object (this).
   * @example
   * sdk.init(module).add('encodeURI', { icon: 'encode.svg' })
   *	.method('encode', { name: 'Encode URI' })
   *	.parameter('uri', { type: 'string' })
   *	.output('encoded', { context: '$.encodedURI', schema: { type: 'string' } })
   *	.action((req, cb) => cb.encoded(null, encodeURI(req.params.uri));
   */

	}, {
		key: 'action',
		value: function action(handler) {
			if (!this._name) {
				throw new Error('need to start a node handler using: `node`');
			}
			if (!handler) {
				throw new Error('missing required parameter: handler');
			}
			if (typeof handler !== 'function') {
				throw new Error('expected handler to be a function');
			}
			if (handler.length !== 2) {
				throw new Error('expected handler function to have signature: (req, callback)');
			}
			this.specs[this._name].methods[this._method].action = handler;
			// finish the method
			this._method = null;
			return this;
		}

		// THIS IS OKAY - this defines a function
		/**
   * A handler function to perform the node method's action.  The function will receive all
   * of the provided parameters in `req.params`.  If any parameters are not provided, or are
   * of the wrong time, or some have defaults, your function will need to handle those
   * situations.  On success, your function should invoke one of the named `output`.  On error,
   * your function should invoke the callback with a non-null `err` value.
   *
   * @example
   * cb.encoded(null, uncodeURI(req.params.uri));
   *
   * @example
   * cb('error!');
   *
   * @public
   * @callback handler
   * @param {Request} req - The {@link module:axway-node-sdk~Request `Request`}
   *		object.
   * @param {flowCallback} cb - The output
   *		{@link module:axway-node-sdk~flowCallback `callback`}.
   */

		// THIS IS OKAY - this defines a function
		/**
   * A callback function that your method
   *		{@link module:axway-node-sdk~handler `handler`} must invoke.
   *
   * @public
   * @callback flowCallback
   * @param {*} [err] - A non `null` value indicates a terminal error (flow processing will stop).
   * @param {*} [value] - The output value to be written back to the flow processing context.
   */

		// THIS IS OKAY - this defines a type
		/**
   * The request object.
   * @typedef {object} Request
   * @property {object} env - The application configuration.
   * @property {object} params - The method params, as supplied during runtime
   *		(see {@link module:axway-node-sdk~NodeBuilder#parameter .parameter}).
   */

	}]);

	return NodeBuilder;
}();

// * @alias module:axway-node-sdk

/**
 * Axway API Builder SDK for creating custom nodes to work with flows.
 * @typicalname init
 * @param {object} module - The node module.
 * @return {NodeBuilder} A newly constructed
 *		{@link module:axway-node-sdk~NodeBuilder `NodeBuilder`} object
 * @function
 * @example
 * const sdk = require('axway-node-sdk');
 * exports = module.exports = sdk.init(module);
 */


function init(module) {
	return new NodeBuilder(module);
}

exports = module.exports = {
	init: init,
	mocknode: mocknode
};