'use strict';

var fs = require('fs');
var path = require('path');
var dot = require('dot');
var validate = require('validate-npm-package-name');

dot.templateSettings.strip = false;

function generate(from, to, args) {
	var names = fs.readdirSync(from);
	names.forEach(function (tname) {
		var fname = path.join(from, tname);
		var fd = fs.openSync(fname, 'r');
		var stat = fs.fstatSync(fd);
		if (stat.isDirectory()) {
			return generate(path.join(from, tname), path.join(to, tname), args);
		}
		var data = dot.template(fs.readFileSync(fname, 'utf8'))(args);
		var dest = path.join(to, path.basename(tname, '.dot'));
		var dir = path.dirname(dest);
		if (!fs.existsSync(dir)) {
			fs.mkdirSync(dir, 448);
		}
		var dfd = fs.openSync(dir, 'r');
		var dirStat = fs.fstatSync(dfd);
		if (!dirStat.isDirectory()) {
			throw new Error('invalid directory: ' + dirStat);
		}
		/* eslint no-console: 0 */
		console.log('writing: ' + dest);
		fs.writeFileSync(dest, data, 'utf8');
	});
}

exports = module.exports = function (opts) {
	var name = opts.name;

	if (name && name.startsWith('nodehandler-')) {
		name = name.replace('nodehandler-', '');
	}
	if (!name) {
		throw new Error('invalid name: ' + opts.name);
	}
	var result = validate('nodehandler-' + name);
	if (!result.validForNewPackages) {
		throw new Error('invalid package name: ' + opts.name);
	}

	var capname = name.charAt(0).toUpperCase() + name.slice(1);
	var cwd = opts.cwd || path.join(__dirname, '..');
	var args = {
		name: capname,
		lcname: name.toLowerCase(),
		description: (opts.description || 'TODO').replace(/'/g, '\\\''),
		jsonDescription: (opts.description || 'TODO').replace(/"/g, '\\"')
	};
	var target = path.join('.', 'nodehandler-' + name);
	generate(path.join(cwd, 'templates'), target, args);
};